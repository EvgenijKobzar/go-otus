// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: season.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addSeason = `-- name: AddSeason :one
INSERT INTO movies_online.season (
                                  SERIAL_ID,
                                  SORT,
                                  ACTIVE,
                                  TITLE
)
VALUES
    (
        $1,
        $2,
        $3,
        $4
    )
RETURNING id
`

type AddSeasonParams struct {
	SerialID sql.NullInt32
	Sort     sql.NullInt32
	Active   sql.NullString
	Title    sql.NullString
}

func (q *Queries) AddSeason(ctx context.Context, arg AddSeasonParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addSeason,
		arg.SerialID,
		arg.Sort,
		arg.Active,
		arg.Title,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteSeason = `-- name: DeleteSeason :exec
delete from movies_online.season
where id = $1
`

func (q *Queries) DeleteSeason(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSeason, id)
	return err
}

const getAllSeason = `-- name: GetAllSeason :many
select id, serial_id, sort, active, title, created_at, updated_at from movies_online.season
`

func (q *Queries) GetAllSeason(ctx context.Context) ([]MoviesOnlineSeason, error) {
	rows, err := q.db.QueryContext(ctx, getAllSeason)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoviesOnlineSeason
	for rows.Next() {
		var i MoviesOnlineSeason
		if err := rows.Scan(
			&i.ID,
			&i.SerialID,
			&i.Sort,
			&i.Active,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByIdSeason = `-- name: GetByIdSeason :one
select id, serial_id, sort, active, title, created_at, updated_at
from movies_online.season
where id = $1
`

func (q *Queries) GetByIdSeason(ctx context.Context, id int32) (MoviesOnlineSeason, error) {
	row := q.db.QueryRowContext(ctx, getByIdSeason, id)
	var i MoviesOnlineSeason
	err := row.Scan(
		&i.ID,
		&i.SerialID,
		&i.Sort,
		&i.Active,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSeason = `-- name: UpdateSeason :exec
UPDATE movies_online.season SET
                                 SERIAL_ID=$2,
                                 SORT=$3,
                                 ACTIVE=$4,
                                 TITLE=$5
WHERE id = $1
`

type UpdateSeasonParams struct {
	ID       int32
	SerialID sql.NullInt32
	Sort     sql.NullInt32
	Active   sql.NullString
	Title    sql.NullString
}

func (q *Queries) UpdateSeason(ctx context.Context, arg UpdateSeasonParams) error {
	_, err := q.db.ExecContext(ctx, updateSeason,
		arg.ID,
		arg.SerialID,
		arg.Sort,
		arg.Active,
		arg.Title,
	)
	return err
}
