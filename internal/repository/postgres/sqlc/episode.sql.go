// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: episode.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addEpisode = `-- name: AddEpisode :one
INSERT INTO movies_online.episode (
                                   QUALITY,
                                   RATING,
                                   PRODUCTION_PERIOD,
                                   SERIAL_ID,
                                   SEASON_ID,
                                   SORT,
                                   ACTIVE,
                                   FILE_ID,
                                   TITLE,
                                   DURATION,
                                   DESCRIPTION
)
VALUES
    (
     $1,
     $2,
     $3,
     $4,
     $5,
     $6,
     $7,
     $8,
     $9,
     $10,
     $11
    )
RETURNING id
`

type AddEpisodeParams struct {
	Quality          sql.NullString
	Rating           sql.NullFloat64
	ProductionPeriod sql.NullString
	SerialID         sql.NullInt32
	SeasonID         sql.NullInt32
	Sort             sql.NullInt32
	Active           sql.NullString
	FileID           sql.NullInt32
	Title            sql.NullString
	Duration         sql.NullFloat64
	Description      sql.NullString
}

func (q *Queries) AddEpisode(ctx context.Context, arg AddEpisodeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addEpisode,
		arg.Quality,
		arg.Rating,
		arg.ProductionPeriod,
		arg.SerialID,
		arg.SeasonID,
		arg.Sort,
		arg.Active,
		arg.FileID,
		arg.Title,
		arg.Duration,
		arg.Description,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteEpisode = `-- name: DeleteEpisode :exec
delete from movies_online.episode
where id = $1
`

func (q *Queries) DeleteEpisode(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEpisode, id)
	return err
}

const getAllEpisode = `-- name: GetAllEpisode :many
select id, quality, rating, production_period, serial_id, season_id, sort, active, file_id, title, duration, description, created_at, updated_at from movies_online.episode
`

func (q *Queries) GetAllEpisode(ctx context.Context) ([]MoviesOnlineEpisode, error) {
	rows, err := q.db.QueryContext(ctx, getAllEpisode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoviesOnlineEpisode
	for rows.Next() {
		var i MoviesOnlineEpisode
		if err := rows.Scan(
			&i.ID,
			&i.Quality,
			&i.Rating,
			&i.ProductionPeriod,
			&i.SerialID,
			&i.SeasonID,
			&i.Sort,
			&i.Active,
			&i.FileID,
			&i.Title,
			&i.Duration,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByIdEpisode = `-- name: GetByIdEpisode :one
select id, quality, rating, production_period, serial_id, season_id, sort, active, file_id, title, duration, description, created_at, updated_at
from movies_online.episode
where id = $1
`

func (q *Queries) GetByIdEpisode(ctx context.Context, id int32) (MoviesOnlineEpisode, error) {
	row := q.db.QueryRowContext(ctx, getByIdEpisode, id)
	var i MoviesOnlineEpisode
	err := row.Scan(
		&i.ID,
		&i.Quality,
		&i.Rating,
		&i.ProductionPeriod,
		&i.SerialID,
		&i.SeasonID,
		&i.Sort,
		&i.Active,
		&i.FileID,
		&i.Title,
		&i.Duration,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEpisode = `-- name: UpdateEpisode :exec
UPDATE movies_online.episode SET
                                 QUALITY = $2,
                                 RATING = $3,
                                 PRODUCTION_PERIOD = $4,
                                 SERIAL_ID = $5,
                                 SEASON_ID = $6,
                                 SORT = $7,
                                 ACTIVE = $8,
                                 FILE_ID = $9,
                                 TITLE = $10,
                                 DURATION = $11,
                                 DESCRIPTION = $12
WHERE id = $1
`

type UpdateEpisodeParams struct {
	ID               int32
	Quality          sql.NullString
	Rating           sql.NullFloat64
	ProductionPeriod sql.NullString
	SerialID         sql.NullInt32
	SeasonID         sql.NullInt32
	Sort             sql.NullInt32
	Active           sql.NullString
	FileID           sql.NullInt32
	Title            sql.NullString
	Duration         sql.NullFloat64
	Description      sql.NullString
}

func (q *Queries) UpdateEpisode(ctx context.Context, arg UpdateEpisodeParams) error {
	_, err := q.db.ExecContext(ctx, updateEpisode,
		arg.ID,
		arg.Quality,
		arg.Rating,
		arg.ProductionPeriod,
		arg.SerialID,
		arg.SeasonID,
		arg.Sort,
		arg.Active,
		arg.FileID,
		arg.Title,
		arg.Duration,
		arg.Description,
	)
	return err
}
