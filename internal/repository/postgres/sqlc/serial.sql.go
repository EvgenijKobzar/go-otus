// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: serial.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addSerial = `-- name: AddSerial :one
INSERT INTO movies_online.serial (
                                  SORT,
                                  ACTIVE,
                                  FILE_ID,
                                  TITLE,
                                  PRODUCTION_PERIOD,
                                  RATING,
                                  QUALITY,
                                  DURATION
)
VALUES
    (
     $1,
     $2,
     $3,
     $4,
     $5,
     $6,
     $7,
     $8
    )
RETURNING id
`

type AddSerialParams struct {
	Sort             sql.NullInt32
	Active           sql.NullString
	FileID           sql.NullInt32
	Title            sql.NullString
	ProductionPeriod sql.NullString
	Rating           sql.NullFloat64
	Quality          sql.NullString
	Duration         sql.NullFloat64
}

func (q *Queries) AddSerial(ctx context.Context, arg AddSerialParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addSerial,
		arg.Sort,
		arg.Active,
		arg.FileID,
		arg.Title,
		arg.ProductionPeriod,
		arg.Rating,
		arg.Quality,
		arg.Duration,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteSerial = `-- name: DeleteSerial :exec
delete from movies_online.serial
where id = $1
`

func (q *Queries) DeleteSerial(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSerial, id)
	return err
}

const getAllSerial = `-- name: GetAllSerial :many
select id, sort, active, file_id, title, production_period, rating, quality, duration, description, created_at, updated_at from movies_online.serial
`

func (q *Queries) GetAllSerial(ctx context.Context) ([]MoviesOnlineSerial, error) {
	rows, err := q.db.QueryContext(ctx, getAllSerial)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoviesOnlineSerial
	for rows.Next() {
		var i MoviesOnlineSerial
		if err := rows.Scan(
			&i.ID,
			&i.Sort,
			&i.Active,
			&i.FileID,
			&i.Title,
			&i.ProductionPeriod,
			&i.Rating,
			&i.Quality,
			&i.Duration,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByIdSerial = `-- name: GetByIdSerial :one
select id, sort, active, file_id, title, production_period, rating, quality, duration, description, created_at, updated_at
from movies_online.serial
where id = $1
`

func (q *Queries) GetByIdSerial(ctx context.Context, id int32) (MoviesOnlineSerial, error) {
	row := q.db.QueryRowContext(ctx, getByIdSerial, id)
	var i MoviesOnlineSerial
	err := row.Scan(
		&i.ID,
		&i.Sort,
		&i.Active,
		&i.FileID,
		&i.Title,
		&i.ProductionPeriod,
		&i.Rating,
		&i.Quality,
		&i.Duration,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSerial = `-- name: UpdateSerial :exec
UPDATE movies_online.serial SET
                                SORT=$2,
                                ACTIVE=$3,
                                FILE_ID=$4,
                                TITLE=$5,
                                PRODUCTION_PERIOD=$6,
                                RATING=$7,
                                QUALITY=$8,
                                DURATION=$9
WHERE id = $1
`

type UpdateSerialParams struct {
	ID               int32
	Sort             sql.NullInt32
	Active           sql.NullString
	FileID           sql.NullInt32
	Title            sql.NullString
	ProductionPeriod sql.NullString
	Rating           sql.NullFloat64
	Quality          sql.NullString
	Duration         sql.NullFloat64
}

func (q *Queries) UpdateSerial(ctx context.Context, arg UpdateSerialParams) error {
	_, err := q.db.ExecContext(ctx, updateSerial,
		arg.ID,
		arg.Sort,
		arg.Active,
		arg.FileID,
		arg.Title,
		arg.ProductionPeriod,
		arg.Rating,
		arg.Quality,
		arg.Duration,
	)
	return err
}
