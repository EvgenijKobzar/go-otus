// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/grpc/v1/serial.proto

package serial_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SerialService_CreateSerial_FullMethodName  = "/serial.SerialService/CreateSerial"
	SerialService_GetSerial_FullMethodName     = "/serial.SerialService/GetSerial"
	SerialService_UpdateSerial_FullMethodName  = "/serial.SerialService/UpdateSerial"
	SerialService_DeleteSerial_FullMethodName  = "/serial.SerialService/DeleteSerial"
	SerialService_GetAllSerials_FullMethodName = "/serial.SerialService/GetAllSerials"
)

// SerialServiceClient is the client API for SerialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SerialServiceClient interface {
	// Создание сериала (Unary)
	CreateSerial(ctx context.Context, in *CreateSerialRequest, opts ...grpc.CallOption) (*Serial, error)
	// Получение сериала по ID (Unary)
	GetSerial(ctx context.Context, in *SerialRequest, opts ...grpc.CallOption) (*Serial, error)
	// Обновление сериала (Unary)
	UpdateSerial(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*Serial, error)
	// Удаление сериала (Unary)
	DeleteSerial(ctx context.Context, in *SerialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Получение всех сериалов (Unary)
	GetAllSerials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SerialList, error)
}

type serialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSerialServiceClient(cc grpc.ClientConnInterface) SerialServiceClient {
	return &serialServiceClient{cc}
}

func (c *serialServiceClient) CreateSerial(ctx context.Context, in *CreateSerialRequest, opts ...grpc.CallOption) (*Serial, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Serial)
	err := c.cc.Invoke(ctx, SerialService_CreateSerial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialServiceClient) GetSerial(ctx context.Context, in *SerialRequest, opts ...grpc.CallOption) (*Serial, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Serial)
	err := c.cc.Invoke(ctx, SerialService_GetSerial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialServiceClient) UpdateSerial(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*Serial, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Serial)
	err := c.cc.Invoke(ctx, SerialService_UpdateSerial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialServiceClient) DeleteSerial(ctx context.Context, in *SerialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SerialService_DeleteSerial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serialServiceClient) GetAllSerials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SerialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SerialList)
	err := c.cc.Invoke(ctx, SerialService_GetAllSerials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SerialServiceServer is the server API for SerialService service.
// All implementations must embed UnimplementedSerialServiceServer
// for forward compatibility.
type SerialServiceServer interface {
	// Создание сериала (Unary)
	CreateSerial(context.Context, *CreateSerialRequest) (*Serial, error)
	// Получение сериала по ID (Unary)
	GetSerial(context.Context, *SerialRequest) (*Serial, error)
	// Обновление сериала (Unary)
	UpdateSerial(context.Context, *Serial) (*Serial, error)
	// Удаление сериала (Unary)
	DeleteSerial(context.Context, *SerialRequest) (*emptypb.Empty, error)
	// Получение всех сериалов (Unary)
	GetAllSerials(context.Context, *emptypb.Empty) (*SerialList, error)
	mustEmbedUnimplementedSerialServiceServer()
}

// UnimplementedSerialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSerialServiceServer struct{}

func (UnimplementedSerialServiceServer) CreateSerial(context.Context, *CreateSerialRequest) (*Serial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSerial not implemented")
}
func (UnimplementedSerialServiceServer) GetSerial(context.Context, *SerialRequest) (*Serial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSerial not implemented")
}
func (UnimplementedSerialServiceServer) UpdateSerial(context.Context, *Serial) (*Serial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSerial not implemented")
}
func (UnimplementedSerialServiceServer) DeleteSerial(context.Context, *SerialRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSerial not implemented")
}
func (UnimplementedSerialServiceServer) GetAllSerials(context.Context, *emptypb.Empty) (*SerialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSerials not implemented")
}
func (UnimplementedSerialServiceServer) mustEmbedUnimplementedSerialServiceServer() {}
func (UnimplementedSerialServiceServer) testEmbeddedByValue()                       {}

// UnsafeSerialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SerialServiceServer will
// result in compilation errors.
type UnsafeSerialServiceServer interface {
	mustEmbedUnimplementedSerialServiceServer()
}

func RegisterSerialServiceServer(s grpc.ServiceRegistrar, srv SerialServiceServer) {
	// If the following call pancis, it indicates UnimplementedSerialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SerialService_ServiceDesc, srv)
}

func _SerialService_CreateSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServiceServer).CreateSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerialService_CreateSerial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServiceServer).CreateSerial(ctx, req.(*CreateSerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialService_GetSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServiceServer).GetSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerialService_GetSerial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServiceServer).GetSerial(ctx, req.(*SerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialService_UpdateSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Serial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServiceServer).UpdateSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerialService_UpdateSerial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServiceServer).UpdateSerial(ctx, req.(*Serial))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialService_DeleteSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServiceServer).DeleteSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerialService_DeleteSerial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServiceServer).DeleteSerial(ctx, req.(*SerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SerialService_GetAllSerials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerialServiceServer).GetAllSerials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SerialService_GetAllSerials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerialServiceServer).GetAllSerials(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SerialService_ServiceDesc is the grpc.ServiceDesc for SerialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SerialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serial.SerialService",
	HandlerType: (*SerialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSerial",
			Handler:    _SerialService_CreateSerial_Handler,
		},
		{
			MethodName: "GetSerial",
			Handler:    _SerialService_GetSerial_Handler,
		},
		{
			MethodName: "UpdateSerial",
			Handler:    _SerialService_UpdateSerial_Handler,
		},
		{
			MethodName: "DeleteSerial",
			Handler:    _SerialService_DeleteSerial_Handler,
		},
		{
			MethodName: "GetAllSerials",
			Handler:    _SerialService_GetAllSerials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/serial.proto",
}
